# {{packageName}}.{{apiPackage}}.{{classname}}{{#description}}

{{description}}{{/description}}

All URIs are relative to https://api.factset.com

Method | HTTP request | Description
------------- | ------------- | -------------
{{#operations}}{{#operation}}[**{{operationId}}WithHttpInfo**]({{classname}}.md#{{operationIdLowerCase}}) | **{{httpMethod}}** {{path}} | {{#summary}}{{summary}}{{/summary}}
{{/operation}}{{/operations}}

{{#operations}}
{{#operation}}

## {{{operationId}}}WithHttpInfo

> {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}} {{operationId}}WithHttpInfo ({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = null{{/optionalMethodArgument}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}})

{{{summary}}}{{#notes}}

{{{notes}}}{{/notes}}

### Example

```csharp
using System;
using System.Net;
using System.Collections.Generic;
using {{packageName}}.{{apiPackage}};
using {{packageName}}.Client;
using {{packageName}}.{{modelPackage}};

namespace Example
{
    public class {{operationId}}WithHttpInfoExample
    {
        public static void main()
        {
		    Configuration.Default.BasePath = "https://api.factset.com";
            {{#hasAuthMethods}}
            {{#authMethods}}
            {{#isBasic}}
            // Configure HTTP basic authorization: {{{name}}}
            Configuration.Default.Username = "YOUR_USERNAME"; // username-serial combination
            Configuration.Default.Password = "YOUR_PASSWORD"; // api key generated on developer portal
            {{/isBasic}}
            {{#isApiKey}}
            // Configure API key authorization: {{{name}}}
            Configuration.Default.AddApiKey("{{{keyParamName}}}", "YOUR_API_KEY");
            // Uncomment below to setup prefix (e.g. Bearer) for API key, if needed
            // Configuration.Default.AddApiKeyPrefix("{{{keyParamName}}}", "Bearer");
            {{/isApiKey}}
            {{#isOAuth}}
            // Configure OAuth2 access token for authorization: {{{name}}}
            Configuration.Default.AccessToken = "YOUR_ACCESS_TOKEN";
            {{/isOAuth}}
            {{/authMethods}}

            {{/hasAuthMethods}}
            var apiInstance = new {{classname}}(Configuration.Default);
            {{#allParams}}
            {{#isPrimitiveType}}
            var {{paramName}} = {{{example}}};  // {{{dataType}}} | {{{description}}}{{^required}} (optional) {{/required}}{{#defaultValue}} (default to {{{.}}}){{/defaultValue}}
            {{/isPrimitiveType}}
            {{^isPrimitiveType}}
            var {{paramName}} = new {{{dataType}}}(); // {{{dataType}}} | {{{description}}}{{^required}} (optional) {{/required}}{{#defaultValue}} (default to {{{.}}}){{/defaultValue}}
            {{/isPrimitiveType}}
            {{/allParams}}
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;

            try
            {
                {{#summary}}
                // {{{.}}}
                {{/summary}}
                {{#returnType}}ApiResponse<{{{returnType}}}> result = {{/returnType}}{{^returnType}}ApiResponse<Object> result = {{/returnType}}apiInstance.{{{operationId}}}WithHttpInfo({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});{{#returnType}}
                Console.WriteLine("--------------------------------------------------------");
                Console.WriteLine("Response Code : "+result.StatusCode);
                Console.WriteLine("--------------------------------------------------------");
                {{#returnType}}
                Console.WriteLine(result.Data);
                Console.WriteLine("--------------------------------------------------------");
                {{/returnType}}
                Console.ReadKey();
            }
            catch (ApiException e)
			{
                Console.WriteLine("Exception when calling {{classname}}.{{operationId}}: " + e.ErrorContent );
                Console.WriteLine("--------------------------------------------------------");
                Console.WriteLine("Response Code: "+ e.ErrorCode);
                Console.WriteLine("--------------------------------------------------------");
                Console.WriteLine(e.StackTrace);
            }
        }
    }
}
```

### Parameters

{{^allParams}}This endpoint does not need any parameter.{{/allParams}}{{#allParams}}{{#-last}}
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------{{/-last}}{{/allParams}}
{{#allParams}} **{{paramName}}** | {{#isPrimitiveType}}**{{dataType}}**{{/isPrimitiveType}}{{^isPrimitiveType}}[**{{dataType}}**]({{#isContainer}}{{baseType}}{{/isContainer}}{{^isContainer}}{{dataType}}{{/isContainer}}.md){{/isPrimitiveType}}| {{description}} | {{^required}}[optional] {{/required}}{{#defaultValue}}[default to {{defaultValue}}]{{/defaultValue}}
{{/allParams}}

### Return type

{{#returnType}}{{#returnTypeIsPrimitive}}**{{{returnType}}}**{{/returnTypeIsPrimitive}}{{^returnTypeIsPrimitive}}[**{{{returnType}}}**]({{returnBaseType}}.md){{/returnTypeIsPrimitive}}{{/returnType}}{{^returnType}}void (empty response body){{/returnType}}

### Authorization

{{^authMethods}}No authorization required{{/authMethods}}{{#authMethods}}[{{{name}}}](../README.md#{{{name}}}){{^-last}}, {{/-last}}{{/authMethods}}

### HTTP request headers

- **Content-Type**: {{#consumes}}{{{mediaType}}}{{#hasMore}}, {{/hasMore}}{{/consumes}}{{^consumes}}Not defined{{/consumes}}
- **Accept**: {{#produces}}{{{mediaType}}}{{#hasMore}}, {{/hasMore}}{{/produces}}{{^produces}}Not defined{{/produces}}

### HTTP response details
| HTTP Status Code | Description | Response Headers |
|------------------|-------------|------------------|
{{#responses}}
**{{code}}** | {{message}} | {{#headers}} * {{baseName}} - {{description}} <br> {{/headers}} |
{{/responses}}

[[Back to top]](#)
[[Back to API list]](../README.md#documentation-for-api-endpoints)
[[Back to Model list]](../README.md#documentation-for-models)
[[Back to README]](../README.md)

{{/operation}}
{{/operations}}
